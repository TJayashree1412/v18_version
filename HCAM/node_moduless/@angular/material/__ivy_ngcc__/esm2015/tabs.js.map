{"version":3,"sources":["C:/Users/VarshaRanga/angular/sample/demo/node_modules/@angular/material/esm2015/tabs.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA4EC,2HAQC;;;;;;;;;;;;;;;;;;kCAMA;;;;;;;;;;;;;;;;;;CAgBD,8GAGC;;;;;;;;4EAIA;;;;;;;;;;;;CAUD;;;;;;;0BAKC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA6ED,gDASC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAqFD,oKAKC;;;;;;;;;;;;;;;kCAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA4ID,yQAYC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAgqaD,49EAcC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAiBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAgUD,4pDAeC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAkBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAqHD,45CAWC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAoFD,6LAeC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAaA;;;;;;;;;;;;;;;;;CAOD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAmCC","file":"tabs.js","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { Directive, ElementRef, Inject, InjectionToken, NgZone, TemplateRef, ChangeDetectionStrategy, Component, ContentChild, Input, ViewChild, ViewContainerRef, ViewEncapsulation, ChangeDetectorRef, Output, EventEmitter, Optional, ComponentFactoryResolver, forwardRef, ContentChildren, Attribute, NgModule } from '@angular/core';\r\nimport { CdkPortal, TemplatePortal, CdkPortalOutlet, PortalHostDirective, PortalModule } from '@angular/cdk/portal';\r\nimport { mixinDisabled, mixinDisableRipple, mixinColor, MAT_RIPPLE_GLOBAL_OPTIONS, mixinTabIndex, RippleRenderer, MatCommonModule, MatRippleModule } from '@angular/material/core';\r\nimport { Subject, Subscription, merge, of } from 'rxjs';\r\nimport { animate, state, style, transition, trigger } from '@angular/animations';\r\nimport { Directionality } from '@angular/cdk/bidi';\r\nimport { startWith, takeUntil } from 'rxjs/operators';\r\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport { END, ENTER, HOME, SPACE } from '@angular/cdk/keycodes';\r\nimport { ViewportRuler } from '@angular/cdk/scrolling';\r\nimport { FocusKeyManager, FocusMonitor, A11yModule } from '@angular/cdk/a11y';\r\nimport { Platform } from '@angular/cdk/platform';\r\nimport { ObserversModule } from '@angular/cdk/observers';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\r\n */\r\n/** *\r\n * Injection token for the MatInkBar's Positioner.\r\n  @type {?} */\r\nconst _MAT_INK_BAR_POSITIONER = new InjectionToken('MatInkBarPositioner', {\r\n    providedIn: 'root',\r\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\r\n});\r\n/**\r\n * The default positioner function for the MatInkBar.\r\n * \\@docs-private\r\n * @return {?}\r\n */\r\nfunction _MAT_INK_BAR_POSITIONER_FACTORY() {\r\n    /** @type {?} */\r\n    const method = (element) => ({\r\n        left: element ? (element.offsetLeft || 0) + 'px' : '0',\r\n        width: element ? (element.offsetWidth || 0) + 'px' : '0',\r\n    });\r\n    return method;\r\n}\r\n/**\r\n * The ink-bar is used to display and animate the line underneath the current active tab label.\r\n * \\@docs-private\r\n */\r\nclass MatInkBar {\r\n    /**\r\n     * @param {?} _elementRef\r\n     * @param {?} _ngZone\r\n     * @param {?} _inkBarPositioner\r\n     */\r\n    constructor(_elementRef, _ngZone, _inkBarPositioner) {\r\n        this._elementRef = _elementRef;\r\n        this._ngZone = _ngZone;\r\n        this._inkBarPositioner = _inkBarPositioner;\r\n    }\r\n    /**\r\n     * Calculates the styles from the provided element in order to align the ink-bar to that element.\r\n     * Shows the ink bar if previously set as hidden.\r\n     * @param {?} element\r\n     * @return {?}\r\n     */\r\n    alignToElement(element) {\r\n        this.show();\r\n        if (typeof requestAnimationFrame !== 'undefined') {\r\n            this._ngZone.runOutsideAngular(() => {\r\n                requestAnimationFrame(() => this._setStyles(element));\r\n            });\r\n        }\r\n        else {\r\n            this._setStyles(element);\r\n        }\r\n    }\r\n    /**\r\n     * Shows the ink bar.\r\n     * @return {?}\r\n     */\r\n    show() {\r\n        this._elementRef.nativeElement.style.visibility = 'visible';\r\n    }\r\n    /**\r\n     * Hides the ink bar.\r\n     * @return {?}\r\n     */\r\n    hide() {\r\n        this._elementRef.nativeElement.style.visibility = 'hidden';\r\n    }\r\n    /**\r\n     * Sets the proper styles to the ink bar element.\r\n     * @param {?} element\r\n     * @return {?}\r\n     */\r\n    _setStyles(element) {\r\n        /** @type {?} */\r\n        const positions = this._inkBarPositioner(element);\r\n        /** @type {?} */\r\n        const inkBar = this._elementRef.nativeElement;\r\n        inkBar.style.left = positions.left;\r\n        inkBar.style.width = positions.width;\r\n    }\r\n}\r\nMatInkBar.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: 'mat-ink-bar',\r\n                host: {\r\n                    'class': 'mat-ink-bar',\r\n                },\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nMatInkBar.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: NgZone },\r\n    { type: undefined, decorators: [{ type: Inject, args: [_MAT_INK_BAR_POSITIONER,] }] }\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Decorates the `ng-template` tags and reads out the template from it.\r\n */\r\nclass MatTabContent {\r\n    /**\r\n     * @param {?} template\r\n     */\r\n    constructor(template) {\r\n        this.template = template;\r\n    }\r\n}\r\nMatTabContent.decorators = [\r\n    { type: Directive, args: [{ selector: '[matTabContent]' },] },\r\n];\r\n/** @nocollapse */\r\nMatTabContent.ctorParameters = () => [\r\n    { type: TemplateRef }\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Used to flag tab labels for use with the portal directive\r\n */\r\nclass MatTabLabel extends CdkPortal {\r\n}\r\nMatTabLabel.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: '[mat-tab-label], [matTabLabel]',\r\n            },] },\r\n];\r\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\r\n(/** @type {?} */ (MatTabLabel))['ctorParameters'] = () => (/** @type {?} */ (CdkPortal))['ctorParameters'];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\r\n */\r\n/**\r\n * \\@docs-private\r\n */\r\nclass MatTabBase {\r\n}\r\n/** @type {?} */\r\nconst _MatTabMixinBase = mixinDisabled(MatTabBase);\r\nclass MatTab extends _MatTabMixinBase {\r\n    /**\r\n     * @param {?} _viewContainerRef\r\n     */\r\n    constructor(_viewContainerRef) {\r\n        super();\r\n        this._viewContainerRef = _viewContainerRef;\r\n        /**\r\n         * Plain text label for the tab, used when there is no template label.\r\n         */\r\n        this.textLabel = '';\r\n        /**\r\n         * Portal that will be the hosted content of the tab\r\n         */\r\n        this._contentPortal = null;\r\n        /**\r\n         * Emits whenever the internal state of the tab changes.\r\n         */\r\n        this._stateChanges = new Subject();\r\n        /**\r\n         * The relatively indexed position where 0 represents the center, negative is left, and positive\r\n         * represents the right.\r\n         */\r\n        this.position = null;\r\n        /**\r\n         * The initial relatively index origin of the tab if it was created and selected after there\r\n         * was already a selected tab. Provides context of what position the tab should originate from.\r\n         */\r\n        this.origin = null;\r\n        /**\r\n         * Whether the tab is currently active.\r\n         */\r\n        this.isActive = false;\r\n    }\r\n    /**\r\n     * \\@docs-private\r\n     * @return {?}\r\n     */\r\n    get content() {\r\n        return this._contentPortal;\r\n    }\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    ngOnChanges(changes) {\r\n        if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\r\n            this._stateChanges.next();\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        this._stateChanges.complete();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnInit() {\r\n        this._contentPortal = new TemplatePortal(this._explicitContent || this._implicitContent, this._viewContainerRef);\r\n    }\r\n}\r\nMatTab.decorators = [\r\n    { type: Component, args: [{selector: 'mat-tab',\r\n                template: \"<ng-template><ng-content></ng-content></ng-template>\",\r\n                inputs: ['disabled'],\r\n                changeDetection: ChangeDetectionStrategy.OnPush,\r\n                encapsulation: ViewEncapsulation.None,\r\n                exportAs: 'matTab',\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nMatTab.ctorParameters = () => [\r\n    { type: ViewContainerRef }\r\n];\r\nMatTab.propDecorators = {\r\n    templateLabel: [{ type: ContentChild, args: [MatTabLabel,] }],\r\n    _explicitContent: [{ type: ContentChild, args: [MatTabContent, { read: TemplateRef },] }],\r\n    _implicitContent: [{ type: ViewChild, args: [TemplateRef,] }],\r\n    textLabel: [{ type: Input, args: ['label',] }],\r\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\r\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }]\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\r\n */\r\n/** *\r\n * Animations used by the Material tabs.\r\n * \\@docs-private\r\n  @type {?} */\r\nconst matTabsAnimations = {\r\n    /** Animation translates a tab along the X axis. */\r\n    translateTab: trigger('translateTab', [\r\n        // Note: transitions to `none` instead of 0, because some browsers might blur the content.\r\n        state('center, void, left-origin-center, right-origin-center', style({ transform: 'none' })),\r\n        // If the tab is either on the left or right, we additionally add a `min-height` of 1px\r\n        // in order to ensure that the element has a height before its state changes. This is\r\n        // necessary because Chrome does seem to skip the transition in RTL mode if the element does\r\n        // not have a static height and is not rendered. See related issue: #9465\r\n        state('left', style({ transform: 'translate3d(-100%, 0, 0)', minHeight: '1px' })),\r\n        state('right', style({ transform: 'translate3d(100%, 0, 0)', minHeight: '1px' })),\r\n        transition('* => left, * => right, left => center, right => center', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\r\n        transition('void => left-origin-center', [\r\n            style({ transform: 'translate3d(-100%, 0, 0)' }),\r\n            animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\r\n        ]),\r\n        transition('void => right-origin-center', [\r\n            style({ transform: 'translate3d(100%, 0, 0)' }),\r\n            animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\r\n        ])\r\n    ])\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\r\n */\r\n/**\r\n * The portal host directive for the contents of the tab.\r\n * \\@docs-private\r\n */\r\nclass MatTabBodyPortal extends CdkPortalOutlet {\r\n    /**\r\n     * @param {?} componentFactoryResolver\r\n     * @param {?} viewContainerRef\r\n     * @param {?} _host\r\n     */\r\n    constructor(componentFactoryResolver, viewContainerRef, _host) {\r\n        super(componentFactoryResolver, viewContainerRef);\r\n        this._host = _host;\r\n        /**\r\n         * Subscription to events for when the tab body begins centering.\r\n         */\r\n        this._centeringSub = Subscription.EMPTY;\r\n        /**\r\n         * Subscription to events for when the tab body finishes leaving from center position.\r\n         */\r\n        this._leavingSub = Subscription.EMPTY;\r\n    }\r\n    /**\r\n     * Set initial visibility or set up subscription for changing visibility.\r\n     * @return {?}\r\n     */\r\n    ngOnInit() {\r\n        super.ngOnInit();\r\n        this._centeringSub = this._host._beforeCentering\r\n            .pipe(startWith(this._host._isCenterPosition(this._host._position)))\r\n            .subscribe((isCentering) => {\r\n            if (isCentering && !this.hasAttached()) {\r\n                this.attach(this._host._content);\r\n            }\r\n        });\r\n        this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\r\n            this.detach();\r\n        });\r\n    }\r\n    /**\r\n     * Clean up centering subscription.\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        super.ngOnDestroy();\r\n        this._centeringSub.unsubscribe();\r\n        this._leavingSub.unsubscribe();\r\n    }\r\n}\r\nMatTabBodyPortal.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: '[matTabBodyHost]'\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nMatTabBodyPortal.ctorParameters = () => [\r\n    { type: ComponentFactoryResolver },\r\n    { type: ViewContainerRef },\r\n    { type: MatTabBody, decorators: [{ type: Inject, args: [forwardRef(() => MatTabBody),] }] }\r\n];\r\n/**\r\n * Wrapper for the contents of a tab.\r\n * \\@docs-private\r\n */\r\nclass MatTabBody {\r\n    /**\r\n     * @param {?} _elementRef\r\n     * @param {?} _dir\r\n     * @param {?=} changeDetectorRef\r\n     */\r\n    constructor(_elementRef, _dir, /**\r\n                   * @breaking-change 8.0.0 changeDetectorRef to be made required.\r\n                   */\r\n    changeDetectorRef) {\r\n        this._elementRef = _elementRef;\r\n        this._dir = _dir;\r\n        /**\r\n         * Subscription to the directionality change observable.\r\n         */\r\n        this._dirChangeSubscription = Subscription.EMPTY;\r\n        /**\r\n         * Event emitted when the tab begins to animate towards the center as the active tab.\r\n         */\r\n        this._onCentering = new EventEmitter();\r\n        /**\r\n         * Event emitted before the centering of the tab begins.\r\n         */\r\n        this._beforeCentering = new EventEmitter();\r\n        /**\r\n         * Event emitted before the centering of the tab begins.\r\n         */\r\n        this._afterLeavingCenter = new EventEmitter();\r\n        /**\r\n         * Event emitted when the tab completes its animation towards the center.\r\n         */\r\n        this._onCentered = new EventEmitter(true);\r\n        if (this._dir && changeDetectorRef) {\r\n            this._dirChangeSubscription = this._dir.change.subscribe((dir) => {\r\n                this._computePositionAnimationState(dir);\r\n                changeDetectorRef.markForCheck();\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * The shifted index position of the tab body, where zero represents the active center tab.\r\n     * @param {?} position\r\n     * @return {?}\r\n     */\r\n    set position(position) {\r\n        this._positionIndex = position;\r\n        this._computePositionAnimationState();\r\n    }\r\n    /**\r\n     * After initialized, check if the content is centered and has an origin. If so, set the\r\n     * special position states that transition the tab from the left or right before centering.\r\n     * @return {?}\r\n     */\r\n    ngOnInit() {\r\n        if (this._position == 'center' && this.origin != null) {\r\n            this._position = this._computePositionFromOrigin();\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        this._dirChangeSubscription.unsubscribe();\r\n    }\r\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    _onTranslateTabStarted(e) {\r\n        /** @type {?} */\r\n        const isCentering = this._isCenterPosition(e.toState);\r\n        this._beforeCentering.emit(isCentering);\r\n        if (isCentering) {\r\n            this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    _onTranslateTabComplete(e) {\r\n        // If the transition to the center is complete, emit an event.\r\n        if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\r\n            this._onCentered.emit();\r\n        }\r\n        if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\r\n            this._afterLeavingCenter.emit();\r\n        }\r\n    }\r\n    /**\r\n     * The text direction of the containing app.\r\n     * @return {?}\r\n     */\r\n    _getLayoutDirection() {\r\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\r\n    }\r\n    /**\r\n     * Whether the provided position state is considered center, regardless of origin.\r\n     * @param {?} position\r\n     * @return {?}\r\n     */\r\n    _isCenterPosition(position) {\r\n        return position == 'center' ||\r\n            position == 'left-origin-center' ||\r\n            position == 'right-origin-center';\r\n    }\r\n    /**\r\n     * Computes the position state that will be used for the tab-body animation trigger.\r\n     * @param {?=} dir\r\n     * @return {?}\r\n     */\r\n    _computePositionAnimationState(dir = this._getLayoutDirection()) {\r\n        if (this._positionIndex < 0) {\r\n            this._position = dir == 'ltr' ? 'left' : 'right';\r\n        }\r\n        else if (this._positionIndex > 0) {\r\n            this._position = dir == 'ltr' ? 'right' : 'left';\r\n        }\r\n        else {\r\n            this._position = 'center';\r\n        }\r\n    }\r\n    /**\r\n     * Computes the position state based on the specified origin position. This is used if the\r\n     * tab is becoming visible immediately after creation.\r\n     * @return {?}\r\n     */\r\n    _computePositionFromOrigin() {\r\n        /** @type {?} */\r\n        const dir = this._getLayoutDirection();\r\n        if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\r\n            return 'left-origin-center';\r\n        }\r\n        return 'right-origin-center';\r\n    }\r\n}\r\nMatTabBody.decorators = [\r\n    { type: Component, args: [{selector: 'mat-tab-body',\r\n                template: \"<div class=\\\"mat-tab-body-content\\\" #content [@translateTab]=\\\"_position\\\" (@translateTab.start)=\\\"_onTranslateTabStarted($event)\\\" (@translateTab.done)=\\\"_onTranslateTabComplete($event)\\\"><ng-template matTabBodyHost></ng-template></div>\",\r\n                styles: [\".mat-tab-body-content{height:100%;overflow:auto}.mat-tab-group-dynamic-height .mat-tab-body-content{overflow:hidden}\"],\r\n                encapsulation: ViewEncapsulation.None,\r\n                changeDetection: ChangeDetectionStrategy.OnPush,\r\n                animations: [matTabsAnimations.translateTab],\r\n                host: {\r\n                    'class': 'mat-tab-body',\r\n                },\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nMatTabBody.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: Directionality, decorators: [{ type: Optional }] },\r\n    { type: ChangeDetectorRef }\r\n];\r\nMatTabBody.propDecorators = {\r\n    _onCentering: [{ type: Output }],\r\n    _beforeCentering: [{ type: Output }],\r\n    _afterLeavingCenter: [{ type: Output }],\r\n    _onCentered: [{ type: Output }],\r\n    _portalHost: [{ type: ViewChild, args: [PortalHostDirective,] }],\r\n    _content: [{ type: Input, args: ['content',] }],\r\n    origin: [{ type: Input }],\r\n    position: [{ type: Input }]\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\r\n */\r\n/**\r\n * \\@docs-private\r\n */\r\nclass MatTabLabelWrapperBase {\r\n}\r\n/** @type {?} */\r\nconst _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\r\n/**\r\n * Used in the `mat-tab-group` view to display tab labels.\r\n * \\@docs-private\r\n */\r\nclass MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase {\r\n    /**\r\n     * @param {?} elementRef\r\n     */\r\n    constructor(elementRef) {\r\n        super();\r\n        this.elementRef = elementRef;\r\n    }\r\n    /**\r\n     * Sets focus on the wrapper element\r\n     * @return {?}\r\n     */\r\n    focus() {\r\n        this.elementRef.nativeElement.focus();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getOffsetLeft() {\r\n        return this.elementRef.nativeElement.offsetLeft;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getOffsetWidth() {\r\n        return this.elementRef.nativeElement.offsetWidth;\r\n    }\r\n}\r\nMatTabLabelWrapper.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: '[matTabLabelWrapper]',\r\n                inputs: ['disabled'],\r\n                host: {\r\n                    '[class.mat-tab-disabled]': 'disabled',\r\n                    '[attr.aria-disabled]': '!!disabled',\r\n                }\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nMatTabLabelWrapper.ctorParameters = () => [\r\n    { type: ElementRef }\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\r\n */\r\n/** *\r\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\r\n * provide a small affordance to the label next to it.\r\n  @type {?} */\r\nconst EXAGGERATED_OVERSCROLL = 60;\r\n/**\r\n * \\@docs-private\r\n */\r\nclass MatTabHeaderBase {\r\n}\r\n/** @type {?} */\r\nconst _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\r\n/**\r\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\r\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\r\n * width of the header container, then arrows will be displayed to allow the user to scroll\r\n * left and right across the header.\r\n * \\@docs-private\r\n */\r\nclass MatTabHeader extends _MatTabHeaderMixinBase {\r\n    /**\r\n     * @param {?} _elementRef\r\n     * @param {?} _changeDetectorRef\r\n     * @param {?} _viewportRuler\r\n     * @param {?} _dir\r\n     * @param {?=} _ngZone\r\n     */\r\n    constructor(_elementRef, _changeDetectorRef, _viewportRuler, _dir, _ngZone) {\r\n        super();\r\n        this._elementRef = _elementRef;\r\n        this._changeDetectorRef = _changeDetectorRef;\r\n        this._viewportRuler = _viewportRuler;\r\n        this._dir = _dir;\r\n        this._ngZone = _ngZone;\r\n        /**\r\n         * The distance in pixels that the tab labels should be translated to the left.\r\n         */\r\n        this._scrollDistance = 0;\r\n        /**\r\n         * Whether the header should scroll to the selected index after the view has been checked.\r\n         */\r\n        this._selectedIndexChanged = false;\r\n        /**\r\n         * Emits when the component is destroyed.\r\n         */\r\n        this._destroyed = new Subject();\r\n        /**\r\n         * Whether the controls for pagination should be displayed\r\n         */\r\n        this._showPaginationControls = false;\r\n        /**\r\n         * Whether the tab list can be scrolled more towards the end of the tab label list.\r\n         */\r\n        this._disableScrollAfter = true;\r\n        /**\r\n         * Whether the tab list can be scrolled more towards the beginning of the tab label list.\r\n         */\r\n        this._disableScrollBefore = true;\r\n        this._selectedIndex = 0;\r\n        /**\r\n         * Event emitted when the option is selected.\r\n         */\r\n        this.selectFocusedIndex = new EventEmitter();\r\n        /**\r\n         * Event emitted when a label is focused.\r\n         */\r\n        this.indexFocused = new EventEmitter();\r\n    }\r\n    /**\r\n     * The index of the active tab.\r\n     * @return {?}\r\n     */\r\n    get selectedIndex() { return this._selectedIndex; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set selectedIndex(value) {\r\n        value = coerceNumberProperty(value);\r\n        this._selectedIndexChanged = this._selectedIndex != value;\r\n        this._selectedIndex = value;\r\n        if (this._keyManager) {\r\n            this._keyManager.updateActiveItemIndex(value);\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngAfterContentChecked() {\r\n        // If the number of tab labels have changed, check if scrolling should be enabled\r\n        if (this._tabLabelCount != this._labelWrappers.length) {\r\n            this._updatePagination();\r\n            this._tabLabelCount = this._labelWrappers.length;\r\n            this._changeDetectorRef.markForCheck();\r\n        }\r\n        // If the selected index has changed, scroll to the label and check if the scrolling controls\r\n        // should be disabled.\r\n        if (this._selectedIndexChanged) {\r\n            this._scrollToLabel(this._selectedIndex);\r\n            this._checkScrollingControls();\r\n            this._alignInkBarToSelectedTab();\r\n            this._selectedIndexChanged = false;\r\n            this._changeDetectorRef.markForCheck();\r\n        }\r\n        // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\r\n        // then translate the header to reflect this.\r\n        if (this._scrollDistanceChanged) {\r\n            this._updateTabScrollPosition();\r\n            this._scrollDistanceChanged = false;\r\n            this._changeDetectorRef.markForCheck();\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    _handleKeydown(event) {\r\n        switch (event.keyCode) {\r\n            case HOME:\r\n                this._keyManager.setFirstItemActive();\r\n                event.preventDefault();\r\n                break;\r\n            case END:\r\n                this._keyManager.setLastItemActive();\r\n                event.preventDefault();\r\n                break;\r\n            case ENTER:\r\n            case SPACE:\r\n                this.selectFocusedIndex.emit(this.focusIndex);\r\n                event.preventDefault();\r\n                break;\r\n            default:\r\n                this._keyManager.onKeydown(event);\r\n        }\r\n    }\r\n    /**\r\n     * Aligns the ink bar to the selected tab on load.\r\n     * @return {?}\r\n     */\r\n    ngAfterContentInit() {\r\n        /** @type {?} */\r\n        const dirChange = this._dir ? this._dir.change : of(null);\r\n        /** @type {?} */\r\n        const resize = this._viewportRuler.change(150);\r\n        /** @type {?} */\r\n        const realign = () => {\r\n            this._updatePagination();\r\n            this._alignInkBarToSelectedTab();\r\n        };\r\n        this._keyManager = new FocusKeyManager(this._labelWrappers)\r\n            .withHorizontalOrientation(this._getLayoutDirection())\r\n            .withWrap();\r\n        this._keyManager.updateActiveItem(0);\r\n        // Defer the first call in order to allow for slower browsers to lay out the elements.\r\n        // This helps in cases where the user lands directly on a page with paginated tabs.\r\n        typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\r\n        // On dir change or window resize, realign the ink bar and update the orientation of\r\n        // the key manager if the direction has changed.\r\n        merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\r\n            realign();\r\n            this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\r\n        });\r\n        // If there is a change in the focus key manager we need to emit the `indexFocused`\r\n        // event in order to provide a public event that notifies about focus changes. Also we realign\r\n        // the tabs container by scrolling the new focused tab into the visible section.\r\n        this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\r\n            this.indexFocused.emit(newFocusIndex);\r\n            this._setTabFocus(newFocusIndex);\r\n        });\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        this._destroyed.next();\r\n        this._destroyed.complete();\r\n    }\r\n    /**\r\n     * Callback for when the MutationObserver detects that the content has changed.\r\n     * @return {?}\r\n     */\r\n    _onContentChanges() {\r\n        /** @type {?} */\r\n        const zoneCallback = () => {\r\n            this._updatePagination();\r\n            this._alignInkBarToSelectedTab();\r\n            this._changeDetectorRef.markForCheck();\r\n        };\r\n        // The content observer runs outside the `NgZone` by default, which\r\n        // means that we need to bring the callback back in ourselves.\r\n        // @breaking-change 8.0.0 Remove null check for `_ngZone` once it's a required parameter.\r\n        this._ngZone ? this._ngZone.run(zoneCallback) : zoneCallback();\r\n    }\r\n    /**\r\n     * Updating the view whether pagination should be enabled or not\r\n     * @return {?}\r\n     */\r\n    _updatePagination() {\r\n        this._checkPaginationEnabled();\r\n        this._checkScrollingControls();\r\n        this._updateTabScrollPosition();\r\n    }\r\n    /**\r\n     * Tracks which element has focus; used for keyboard navigation\r\n     * @return {?}\r\n     */\r\n    get focusIndex() {\r\n        return this._keyManager ? /** @type {?} */ ((this._keyManager.activeItemIndex)) : 0;\r\n    }\r\n    /**\r\n     * When the focus index is set, we must manually send focus to the correct label\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set focusIndex(value) {\r\n        if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\r\n            return;\r\n        }\r\n        this._keyManager.setActiveItem(value);\r\n    }\r\n    /**\r\n     * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\r\n     * providing a valid index and return true.\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\r\n    _isValidIndex(index) {\r\n        if (!this._labelWrappers) {\r\n            return true;\r\n        }\r\n        /** @type {?} */\r\n        const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\r\n        return !!tab && !tab.disabled;\r\n    }\r\n    /**\r\n     * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\r\n     * scrolling is enabled.\r\n     * @param {?} tabIndex\r\n     * @return {?}\r\n     */\r\n    _setTabFocus(tabIndex) {\r\n        if (this._showPaginationControls) {\r\n            this._scrollToLabel(tabIndex);\r\n        }\r\n        if (this._labelWrappers && this._labelWrappers.length) {\r\n            this._labelWrappers.toArray()[tabIndex].focus();\r\n            /** @type {?} */\r\n            const containerEl = this._tabListContainer.nativeElement;\r\n            /** @type {?} */\r\n            const dir = this._getLayoutDirection();\r\n            if (dir == 'ltr') {\r\n                containerEl.scrollLeft = 0;\r\n            }\r\n            else {\r\n                containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * The layout direction of the containing app.\r\n     * @return {?}\r\n     */\r\n    _getLayoutDirection() {\r\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\r\n    }\r\n    /**\r\n     * Performs the CSS transformation on the tab list that will cause the list to scroll.\r\n     * @return {?}\r\n     */\r\n    _updateTabScrollPosition() {\r\n        /** @type {?} */\r\n        const scrollDistance = this.scrollDistance;\r\n        /** @type {?} */\r\n        const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\r\n        // Don't use `translate3d` here because we don't want to create a new layer. A new layer\r\n        // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\r\n        // and ripples will exceed the boundaries of the visible tab bar.\r\n        // See: https://github.com/angular/material2/issues/10276\r\n        this._tabList.nativeElement.style.transform = `translateX(${translateX}px)`;\r\n    }\r\n    /**\r\n     * Sets the distance in pixels that the tab header should be transformed in the X-axis.\r\n     * @return {?}\r\n     */\r\n    get scrollDistance() { return this._scrollDistance; }\r\n    /**\r\n     * @param {?} v\r\n     * @return {?}\r\n     */\r\n    set scrollDistance(v) {\r\n        this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\r\n        // Mark that the scroll distance has changed so that after the view is checked, the CSS\r\n        // transformation can move the header.\r\n        this._scrollDistanceChanged = true;\r\n        this._checkScrollingControls();\r\n    }\r\n    /**\r\n     * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\r\n     * the end of the list, respectively). The distance to scroll is computed to be a third of the\r\n     * length of the tab list view window.\r\n     *\r\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\r\n     * should be called sparingly.\r\n     * @param {?} scrollDir\r\n     * @return {?}\r\n     */\r\n    _scrollHeader(scrollDir) {\r\n        /** @type {?} */\r\n        const viewLength = this._tabListContainer.nativeElement.offsetWidth;\r\n        // Move the scroll distance one-third the length of the tab list's viewport.\r\n        this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\r\n    }\r\n    /**\r\n     * Moves the tab list such that the desired tab label (marked by index) is moved into view.\r\n     *\r\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\r\n     * should be called sparingly.\r\n     * @param {?} labelIndex\r\n     * @return {?}\r\n     */\r\n    _scrollToLabel(labelIndex) {\r\n        /** @type {?} */\r\n        const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\r\n        if (!selectedLabel) {\r\n            return;\r\n        }\r\n        /** @type {?} */\r\n        const viewLength = this._tabListContainer.nativeElement.offsetWidth;\r\n        /** @type {?} */\r\n        let labelBeforePos;\r\n        /** @type {?} */\r\n        let labelAfterPos;\r\n        if (this._getLayoutDirection() == 'ltr') {\r\n            labelBeforePos = selectedLabel.getOffsetLeft();\r\n            labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\r\n        }\r\n        else {\r\n            labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\r\n            labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\r\n        }\r\n        /** @type {?} */\r\n        const beforeVisiblePos = this.scrollDistance;\r\n        /** @type {?} */\r\n        const afterVisiblePos = this.scrollDistance + viewLength;\r\n        if (labelBeforePos < beforeVisiblePos) {\r\n            // Scroll header to move label to the before direction\r\n            this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\r\n        }\r\n        else if (labelAfterPos > afterVisiblePos) {\r\n            // Scroll header to move label to the after direction\r\n            this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\r\n        }\r\n    }\r\n    /**\r\n     * Evaluate whether the pagination controls should be displayed. If the scroll width of the\r\n     * tab list is wider than the size of the header container, then the pagination controls should\r\n     * be shown.\r\n     *\r\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\r\n     * should be called sparingly.\r\n     * @return {?}\r\n     */\r\n    _checkPaginationEnabled() {\r\n        /** @type {?} */\r\n        const isEnabled = this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\r\n        if (!isEnabled) {\r\n            this.scrollDistance = 0;\r\n        }\r\n        if (isEnabled !== this._showPaginationControls) {\r\n            this._changeDetectorRef.markForCheck();\r\n        }\r\n        this._showPaginationControls = isEnabled;\r\n    }\r\n    /**\r\n     * Evaluate whether the before and after controls should be enabled or disabled.\r\n     * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\r\n     * before button. If the header is at the end of the list (scroll distance is equal to the\r\n     * maximum distance we can scroll), then disable the after button.\r\n     *\r\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\r\n     * should be called sparingly.\r\n     * @return {?}\r\n     */\r\n    _checkScrollingControls() {\r\n        // Check if the pagination arrows should be activated.\r\n        this._disableScrollBefore = this.scrollDistance == 0;\r\n        this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\r\n        this._changeDetectorRef.markForCheck();\r\n    }\r\n    /**\r\n     * Determines what is the maximum length in pixels that can be set for the scroll distance. This\r\n     * is equal to the difference in width between the tab list container and tab header container.\r\n     *\r\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\r\n     * should be called sparingly.\r\n     * @return {?}\r\n     */\r\n    _getMaxScrollDistance() {\r\n        /** @type {?} */\r\n        const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\r\n        /** @type {?} */\r\n        const viewLength = this._tabListContainer.nativeElement.offsetWidth;\r\n        return (lengthOfTabList - viewLength) || 0;\r\n    }\r\n    /**\r\n     * Tells the ink-bar to align itself to the current label wrapper\r\n     * @return {?}\r\n     */\r\n    _alignInkBarToSelectedTab() {\r\n        /** @type {?} */\r\n        const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\r\n            this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\r\n            null;\r\n        this._inkBar.alignToElement(/** @type {?} */ ((selectedLabelWrapper)));\r\n    }\r\n}\r\nMatTabHeader.decorators = [\r\n    { type: Component, args: [{selector: 'mat-tab-header',\r\n                template: \"<div class=\\\"mat-tab-header-pagination mat-tab-header-pagination-before mat-elevation-z4\\\" aria-hidden=\\\"true\\\" mat-ripple [matRippleDisabled]=\\\"_disableScrollBefore || disableRipple\\\" [class.mat-tab-header-pagination-disabled]=\\\"_disableScrollBefore\\\" (click)=\\\"_scrollHeader('before')\\\"><div class=\\\"mat-tab-header-pagination-chevron\\\"></div></div><div class=\\\"mat-tab-label-container\\\" #tabListContainer (keydown)=\\\"_handleKeydown($event)\\\"><div class=\\\"mat-tab-list\\\" #tabList role=\\\"tablist\\\" (cdkObserveContent)=\\\"_onContentChanges()\\\"><div class=\\\"mat-tab-labels\\\"><ng-content></ng-content></div><mat-ink-bar></mat-ink-bar></div></div><div class=\\\"mat-tab-header-pagination mat-tab-header-pagination-after mat-elevation-z4\\\" aria-hidden=\\\"true\\\" mat-ripple [matRippleDisabled]=\\\"_disableScrollAfter || disableRipple\\\" [class.mat-tab-header-pagination-disabled]=\\\"_disableScrollAfter\\\" (click)=\\\"_scrollHeader('after')\\\"><div class=\\\"mat-tab-header-pagination-chevron\\\"></div></div>\",\r\n                styles: [\".mat-tab-header{display:flex;overflow:hidden;position:relative;flex-shrink:0}.mat-tab-label{height:48px;padding:0 24px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;position:relative}.mat-tab-label:focus{outline:0}.mat-tab-label:focus:not(.mat-tab-disabled){opacity:1}@media screen and (-ms-high-contrast:active){.mat-tab-label:focus{outline:dotted 2px}}.mat-tab-label.mat-tab-disabled{cursor:default}@media screen and (-ms-high-contrast:active){.mat-tab-label.mat-tab-disabled{opacity:.5}}.mat-tab-label .mat-tab-label-content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}@media screen and (-ms-high-contrast:active){.mat-tab-label{opacity:1}}@media (max-width:599px){.mat-tab-label{min-width:72px}}.mat-ink-bar{position:absolute;bottom:0;height:2px;transition:.5s cubic-bezier(.35,0,.25,1)}.mat-tab-group-inverted-header .mat-ink-bar{bottom:auto;top:0}@media screen and (-ms-high-contrast:active){.mat-ink-bar{outline:solid 2px;height:0}}.mat-tab-header-pagination{position:relative;display:none;justify-content:center;align-items:center;min-width:32px;cursor:pointer;z-index:2}.mat-tab-header-pagination-controls-enabled .mat-tab-header-pagination{display:flex}.mat-tab-header-pagination-before,.mat-tab-header-rtl .mat-tab-header-pagination-after{padding-left:4px}.mat-tab-header-pagination-before .mat-tab-header-pagination-chevron,.mat-tab-header-rtl .mat-tab-header-pagination-after .mat-tab-header-pagination-chevron{transform:rotate(-135deg)}.mat-tab-header-pagination-after,.mat-tab-header-rtl .mat-tab-header-pagination-before{padding-right:4px}.mat-tab-header-pagination-after .mat-tab-header-pagination-chevron,.mat-tab-header-rtl .mat-tab-header-pagination-before .mat-tab-header-pagination-chevron{transform:rotate(45deg)}.mat-tab-header-pagination-chevron{border-style:solid;border-width:2px 2px 0 0;content:'';height:8px;width:8px}.mat-tab-header-pagination-disabled{box-shadow:none;cursor:default}.mat-tab-label-container{display:flex;flex-grow:1;overflow:hidden;z-index:1}.mat-tab-list{flex-grow:1;position:relative;transition:transform .5s cubic-bezier(.35,0,.25,1)}.mat-tab-labels{display:flex}[mat-align-tabs=center] .mat-tab-labels{justify-content:center}[mat-align-tabs=end] .mat-tab-labels{justify-content:flex-end}\"],\r\n                inputs: ['disableRipple'],\r\n                encapsulation: ViewEncapsulation.None,\r\n                changeDetection: ChangeDetectionStrategy.OnPush,\r\n                host: {\r\n                    'class': 'mat-tab-header',\r\n                    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\r\n                    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\r\n                },\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nMatTabHeader.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: ChangeDetectorRef },\r\n    { type: ViewportRuler },\r\n    { type: Directionality, decorators: [{ type: Optional }] },\r\n    { type: NgZone }\r\n];\r\nMatTabHeader.propDecorators = {\r\n    _labelWrappers: [{ type: ContentChildren, args: [MatTabLabelWrapper,] }],\r\n    _inkBar: [{ type: ViewChild, args: [MatInkBar,] }],\r\n    _tabListContainer: [{ type: ViewChild, args: ['tabListContainer',] }],\r\n    _tabList: [{ type: ViewChild, args: ['tabList',] }],\r\n    selectedIndex: [{ type: Input }],\r\n    selectFocusedIndex: [{ type: Output }],\r\n    indexFocused: [{ type: Output }]\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\r\n */\r\n/** *\r\n * Used to generate unique ID's for each tab component\r\n  @type {?} */\r\nlet nextId = 0;\r\n/**\r\n * A simple change event emitted on focus or selection changes.\r\n */\r\nclass MatTabChangeEvent {\r\n}\r\n/**\r\n * \\@docs-private\r\n */\r\nclass MatTabGroupBase {\r\n    /**\r\n     * @param {?} _elementRef\r\n     */\r\n    constructor(_elementRef) {\r\n        this._elementRef = _elementRef;\r\n    }\r\n}\r\n/** @type {?} */\r\nconst _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\r\n/**\r\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\r\n * animated ink-bar, keyboard navigation, and screen reader.\r\n * See: https://material.io/design/components/tabs.html\r\n */\r\nclass MatTabGroup extends _MatTabGroupMixinBase {\r\n    /**\r\n     * @param {?} elementRef\r\n     * @param {?} _changeDetectorRef\r\n     */\r\n    constructor(elementRef, _changeDetectorRef) {\r\n        super(elementRef);\r\n        this._changeDetectorRef = _changeDetectorRef;\r\n        /**\r\n         * The tab index that should be selected after the content has been checked.\r\n         */\r\n        this._indexToSelect = 0;\r\n        /**\r\n         * Snapshot of the height of the tab body wrapper before another tab is activated.\r\n         */\r\n        this._tabBodyWrapperHeight = 0;\r\n        /**\r\n         * Subscription to tabs being added/removed.\r\n         */\r\n        this._tabsSubscription = Subscription.EMPTY;\r\n        /**\r\n         * Subscription to changes in the tab labels.\r\n         */\r\n        this._tabLabelSubscription = Subscription.EMPTY;\r\n        this._dynamicHeight = false;\r\n        this._selectedIndex = null;\r\n        /**\r\n         * Position of the tab header.\r\n         */\r\n        this.headerPosition = 'above';\r\n        /**\r\n         * Output to enable support for two-way binding on `[(selectedIndex)]`\r\n         */\r\n        this.selectedIndexChange = new EventEmitter();\r\n        /**\r\n         * Event emitted when focus has changed within a tab group.\r\n         */\r\n        this.focusChange = new EventEmitter();\r\n        /**\r\n         * Event emitted when the body animation has completed\r\n         */\r\n        this.animationDone = new EventEmitter();\r\n        /**\r\n         * Event emitted when the tab selection has changed.\r\n         */\r\n        this.selectedTabChange = new EventEmitter(true);\r\n        this._groupId = nextId++;\r\n    }\r\n    /**\r\n     * Whether the tab group should grow to the size of the active tab.\r\n     * @return {?}\r\n     */\r\n    get dynamicHeight() { return this._dynamicHeight; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set dynamicHeight(value) { this._dynamicHeight = coerceBooleanProperty(value); }\r\n    /**\r\n     * The index of the active tab.\r\n     * @return {?}\r\n     */\r\n    get selectedIndex() { return this._selectedIndex; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set selectedIndex(value) {\r\n        this._indexToSelect = coerceNumberProperty(value, null);\r\n    }\r\n    /**\r\n     * Background color of the tab group.\r\n     * @return {?}\r\n     */\r\n    get backgroundColor() { return this._backgroundColor; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set backgroundColor(value) {\r\n        /** @type {?} */\r\n        const nativeElement = this._elementRef.nativeElement;\r\n        nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\r\n        if (value) {\r\n            nativeElement.classList.add(`mat-background-${value}`);\r\n        }\r\n        this._backgroundColor = value;\r\n    }\r\n    /**\r\n     * After the content is checked, this component knows what tabs have been defined\r\n     * and what the selected index should be. This is where we can know exactly what position\r\n     * each tab should be in according to the new selected index, and additionally we know how\r\n     * a new selected tab should transition in (from the left or right).\r\n     * @return {?}\r\n     */\r\n    ngAfterContentChecked() {\r\n        /** @type {?} */\r\n        const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\r\n        // If there is a change in selected index, emit a change event. Should not trigger if\r\n        // the selected index has not yet been initialized.\r\n        if (this._selectedIndex != indexToSelect) {\r\n            /** @type {?} */\r\n            const isFirstRun = this._selectedIndex == null;\r\n            if (!isFirstRun) {\r\n                this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\r\n            }\r\n            // Changing these values after change detection has run\r\n            // since the checked content may contain references to them.\r\n            Promise.resolve().then(() => {\r\n                this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\r\n                if (!isFirstRun) {\r\n                    this.selectedIndexChange.emit(indexToSelect);\r\n                }\r\n            });\r\n        }\r\n        // Setup the position for each tab and optionally setup an origin on the next selected tab.\r\n        this._tabs.forEach((tab, index) => {\r\n            tab.position = index - indexToSelect;\r\n            // If there is already a selected tab, then set up an origin for the next selected tab\r\n            // if it doesn't have one already.\r\n            if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\r\n                tab.origin = indexToSelect - this._selectedIndex;\r\n            }\r\n        });\r\n        if (this._selectedIndex !== indexToSelect) {\r\n            this._selectedIndex = indexToSelect;\r\n            this._changeDetectorRef.markForCheck();\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngAfterContentInit() {\r\n        this._subscribeToTabLabels();\r\n        // Subscribe to changes in the amount of tabs, in order to be\r\n        // able to re-render the content as new tabs are added or removed.\r\n        this._tabsSubscription = this._tabs.changes.subscribe(() => {\r\n            /** @type {?} */\r\n            const indexToSelect = this._clampTabIndex(this._indexToSelect);\r\n            // Maintain the previously-selected tab if a new tab is added or removed and there is no\r\n            // explicit change that selects a different tab.\r\n            if (indexToSelect === this._selectedIndex) {\r\n                /** @type {?} */\r\n                const tabs = this._tabs.toArray();\r\n                for (let i = 0; i < tabs.length; i++) {\r\n                    if (tabs[i].isActive) {\r\n                        // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\r\n                        // event, otherwise the consumer may end up in an infinite loop in some edge cases like\r\n                        // adding a tab within the `selectedIndexChange` event.\r\n                        this._indexToSelect = this._selectedIndex = i;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            this._subscribeToTabLabels();\r\n            this._changeDetectorRef.markForCheck();\r\n        });\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        this._tabsSubscription.unsubscribe();\r\n        this._tabLabelSubscription.unsubscribe();\r\n    }\r\n    /**\r\n     * Re-aligns the ink bar to the selected tab element.\r\n     * @return {?}\r\n     */\r\n    realignInkBar() {\r\n        if (this._tabHeader) {\r\n            this._tabHeader._alignInkBarToSelectedTab();\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\r\n    _focusChanged(index) {\r\n        this.focusChange.emit(this._createChangeEvent(index));\r\n    }\r\n    /**\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\r\n    _createChangeEvent(index) {\r\n        /** @type {?} */\r\n        const event = new MatTabChangeEvent;\r\n        event.index = index;\r\n        if (this._tabs && this._tabs.length) {\r\n            event.tab = this._tabs.toArray()[index];\r\n        }\r\n        return event;\r\n    }\r\n    /**\r\n     * Subscribes to changes in the tab labels. This is needed, because the \\@Input for the label is\r\n     * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\r\n     * binding to be updated, we need to subscribe to changes in it and trigger change detection\r\n     * manually.\r\n     * @return {?}\r\n     */\r\n    _subscribeToTabLabels() {\r\n        if (this._tabLabelSubscription) {\r\n            this._tabLabelSubscription.unsubscribe();\r\n        }\r\n        this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\r\n            .subscribe(() => this._changeDetectorRef.markForCheck());\r\n    }\r\n    /**\r\n     * Clamps the given index to the bounds of 0 and the tabs length.\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\r\n    _clampTabIndex(index) {\r\n        // Note the `|| 0`, which ensures that values like NaN can't get through\r\n        // and which would otherwise throw the component into an infinite loop\r\n        // (since Math.max(NaN, 0) === NaN).\r\n        return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\r\n    }\r\n    /**\r\n     * Returns a unique id for each tab label element\r\n     * @param {?} i\r\n     * @return {?}\r\n     */\r\n    _getTabLabelId(i) {\r\n        return `mat-tab-label-${this._groupId}-${i}`;\r\n    }\r\n    /**\r\n     * Returns a unique id for each tab content element\r\n     * @param {?} i\r\n     * @return {?}\r\n     */\r\n    _getTabContentId(i) {\r\n        return `mat-tab-content-${this._groupId}-${i}`;\r\n    }\r\n    /**\r\n     * Sets the height of the body wrapper to the height of the activating tab if dynamic\r\n     * height property is true.\r\n     * @param {?} tabHeight\r\n     * @return {?}\r\n     */\r\n    _setTabBodyWrapperHeight(tabHeight) {\r\n        if (!this._dynamicHeight || !this._tabBodyWrapperHeight) {\r\n            return;\r\n        }\r\n        /** @type {?} */\r\n        const wrapper = this._tabBodyWrapper.nativeElement;\r\n        wrapper.style.height = this._tabBodyWrapperHeight + 'px';\r\n        // This conditional forces the browser to paint the height so that\r\n        // the animation to the new height can have an origin.\r\n        if (this._tabBodyWrapper.nativeElement.offsetHeight) {\r\n            wrapper.style.height = tabHeight + 'px';\r\n        }\r\n    }\r\n    /**\r\n     * Removes the height of the tab body wrapper.\r\n     * @return {?}\r\n     */\r\n    _removeTabBodyWrapperHeight() {\r\n        this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\r\n        this._tabBodyWrapper.nativeElement.style.height = '';\r\n        this.animationDone.emit();\r\n    }\r\n    /**\r\n     * Handle click events, setting new selected index if appropriate.\r\n     * @param {?} tab\r\n     * @param {?} tabHeader\r\n     * @param {?} idx\r\n     * @return {?}\r\n     */\r\n    _handleClick(tab, tabHeader, idx) {\r\n        if (!tab.disabled) {\r\n            this.selectedIndex = tabHeader.focusIndex = idx;\r\n        }\r\n    }\r\n    /**\r\n     * Retrieves the tabindex for the tab.\r\n     * @param {?} tab\r\n     * @param {?} idx\r\n     * @return {?}\r\n     */\r\n    _getTabIndex(tab, idx) {\r\n        if (tab.disabled) {\r\n            return null;\r\n        }\r\n        return this.selectedIndex === idx ? 0 : -1;\r\n    }\r\n}\r\nMatTabGroup.decorators = [\r\n    { type: Component, args: [{selector: 'mat-tab-group',\r\n                exportAs: 'matTabGroup',\r\n                template: \"<mat-tab-header #tabHeader [selectedIndex]=\\\"selectedIndex\\\" [disableRipple]=\\\"disableRipple\\\" (indexFocused)=\\\"_focusChanged($event)\\\" (selectFocusedIndex)=\\\"selectedIndex = $event\\\"><div class=\\\"mat-tab-label\\\" role=\\\"tab\\\" matTabLabelWrapper mat-ripple cdkMonitorElementFocus *ngFor=\\\"let tab of _tabs; let i = index\\\" [id]=\\\"_getTabLabelId(i)\\\" [attr.tabIndex]=\\\"_getTabIndex(tab, i)\\\" [attr.aria-posinset]=\\\"i + 1\\\" [attr.aria-setsize]=\\\"_tabs.length\\\" [attr.aria-controls]=\\\"_getTabContentId(i)\\\" [attr.aria-selected]=\\\"selectedIndex == i\\\" [attr.aria-label]=\\\"tab.ariaLabel || null\\\" [attr.aria-labelledby]=\\\"(!tab.ariaLabel && tab.ariaLabelledby) ? tab.ariaLabelledby : null\\\" [class.mat-tab-label-active]=\\\"selectedIndex == i\\\" [disabled]=\\\"tab.disabled\\\" [matRippleDisabled]=\\\"tab.disabled || disableRipple\\\" (click)=\\\"_handleClick(tab, tabHeader, i)\\\"><div class=\\\"mat-tab-label-content\\\"><ng-template [ngIf]=\\\"tab.templateLabel\\\"><ng-template [cdkPortalOutlet]=\\\"tab.templateLabel\\\"></ng-template></ng-template><ng-template [ngIf]=\\\"!tab.templateLabel\\\">{{tab.textLabel}}</ng-template></div></div></mat-tab-header><div class=\\\"mat-tab-body-wrapper\\\" #tabBodyWrapper><mat-tab-body role=\\\"tabpanel\\\" *ngFor=\\\"let tab of _tabs; let i = index\\\" [id]=\\\"_getTabContentId(i)\\\" [attr.aria-labelledby]=\\\"_getTabLabelId(i)\\\" [class.mat-tab-body-active]=\\\"selectedIndex == i\\\" [content]=\\\"tab.content\\\" [position]=\\\"tab.position\\\" [origin]=\\\"tab.origin\\\" (_onCentered)=\\\"_removeTabBodyWrapperHeight()\\\" (_onCentering)=\\\"_setTabBodyWrapperHeight($event)\\\"></mat-tab-body></div>\",\r\n                styles: [\".mat-tab-group{display:flex;flex-direction:column}.mat-tab-group.mat-tab-group-inverted-header{flex-direction:column-reverse}.mat-tab-label{height:48px;padding:0 24px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;position:relative}.mat-tab-label:focus{outline:0}.mat-tab-label:focus:not(.mat-tab-disabled){opacity:1}@media screen and (-ms-high-contrast:active){.mat-tab-label:focus{outline:dotted 2px}}.mat-tab-label.mat-tab-disabled{cursor:default}@media screen and (-ms-high-contrast:active){.mat-tab-label.mat-tab-disabled{opacity:.5}}.mat-tab-label .mat-tab-label-content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}@media screen and (-ms-high-contrast:active){.mat-tab-label{opacity:1}}@media (max-width:599px){.mat-tab-label{padding:0 12px}}@media (max-width:959px){.mat-tab-label{padding:0 12px}}.mat-tab-group[mat-stretch-tabs]>.mat-tab-header .mat-tab-label{flex-basis:0;flex-grow:1}.mat-tab-body-wrapper{position:relative;overflow:hidden;display:flex;transition:height .5s cubic-bezier(.35,0,.25,1)}.mat-tab-body{top:0;left:0;right:0;bottom:0;position:absolute;display:block;overflow:hidden;flex-basis:100%}.mat-tab-body.mat-tab-body-active{position:relative;overflow-x:hidden;overflow-y:auto;z-index:1;flex-grow:1}.mat-tab-group.mat-tab-group-dynamic-height .mat-tab-body.mat-tab-body-active{overflow-y:hidden}\"],\r\n                encapsulation: ViewEncapsulation.None,\r\n                changeDetection: ChangeDetectionStrategy.OnPush,\r\n                inputs: ['color', 'disableRipple'],\r\n                host: {\r\n                    'class': 'mat-tab-group',\r\n                    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\r\n                    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\r\n                },\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nMatTabGroup.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: ChangeDetectorRef }\r\n];\r\nMatTabGroup.propDecorators = {\r\n    _tabs: [{ type: ContentChildren, args: [MatTab,] }],\r\n    _tabBodyWrapper: [{ type: ViewChild, args: ['tabBodyWrapper',] }],\r\n    _tabHeader: [{ type: ViewChild, args: ['tabHeader',] }],\r\n    dynamicHeight: [{ type: Input }],\r\n    selectedIndex: [{ type: Input }],\r\n    headerPosition: [{ type: Input }],\r\n    backgroundColor: [{ type: Input }],\r\n    selectedIndexChange: [{ type: Output }],\r\n    focusChange: [{ type: Output }],\r\n    animationDone: [{ type: Output }],\r\n    selectedTabChange: [{ type: Output }]\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\r\n */\r\n/**\r\n * \\@docs-private\r\n */\r\nclass MatTabNavBase {\r\n    /**\r\n     * @param {?} _elementRef\r\n     */\r\n    constructor(_elementRef) {\r\n        this._elementRef = _elementRef;\r\n    }\r\n}\r\n/** @type {?} */\r\nconst _MatTabNavMixinBase = mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\r\n/**\r\n * Navigation component matching the styles of the tab group header.\r\n * Provides anchored navigation with animated ink bar.\r\n */\r\nclass MatTabNav extends _MatTabNavMixinBase {\r\n    /**\r\n     * @param {?} elementRef\r\n     * @param {?} _dir\r\n     * @param {?} _ngZone\r\n     * @param {?} _changeDetectorRef\r\n     * @param {?} _viewportRuler\r\n     */\r\n    constructor(elementRef, _dir, _ngZone, _changeDetectorRef, _viewportRuler) {\r\n        super(elementRef);\r\n        this._dir = _dir;\r\n        this._ngZone = _ngZone;\r\n        this._changeDetectorRef = _changeDetectorRef;\r\n        this._viewportRuler = _viewportRuler;\r\n        /**\r\n         * Subject that emits when the component has been destroyed.\r\n         */\r\n        this._onDestroy = new Subject();\r\n    }\r\n    /**\r\n     * Background color of the tab nav.\r\n     * @return {?}\r\n     */\r\n    get backgroundColor() { return this._backgroundColor; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set backgroundColor(value) {\r\n        /** @type {?} */\r\n        const nativeElement = this._elementRef.nativeElement;\r\n        nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\r\n        if (value) {\r\n            nativeElement.classList.add(`mat-background-${value}`);\r\n        }\r\n        this._backgroundColor = value;\r\n    }\r\n    /**\r\n     * Notifies the component that the active link has been changed.\r\n     * \\@breaking-change 8.0.0 `element` parameter to be removed.\r\n     * @param {?} element\r\n     * @return {?}\r\n     */\r\n    updateActiveLink(element) {\r\n        // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\r\n        // @breaking-change 8.0.0\r\n        this._activeLinkChanged = !!element;\r\n        this._changeDetectorRef.markForCheck();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngAfterContentInit() {\r\n        this._ngZone.runOutsideAngular(() => {\r\n            /** @type {?} */\r\n            const dirChange = this._dir ? this._dir.change : of(null);\r\n            return merge(dirChange, this._viewportRuler.change(10))\r\n                .pipe(takeUntil(this._onDestroy))\r\n                .subscribe(() => this._alignInkBar());\r\n        });\r\n    }\r\n    /**\r\n     * Checks if the active link has been changed and, if so, will update the ink bar.\r\n     * @return {?}\r\n     */\r\n    ngAfterContentChecked() {\r\n        if (this._activeLinkChanged) {\r\n            /** @type {?} */\r\n            const activeTab = this._tabLinks.find(tab => tab.active);\r\n            this._activeLinkElement = activeTab ? activeTab._elementRef : null;\r\n            this._alignInkBar();\r\n            this._activeLinkChanged = false;\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        this._onDestroy.next();\r\n        this._onDestroy.complete();\r\n    }\r\n    /**\r\n     * Aligns the ink bar to the active link.\r\n     * @return {?}\r\n     */\r\n    _alignInkBar() {\r\n        if (this._activeLinkElement) {\r\n            this._inkBar.show();\r\n            this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\r\n        }\r\n        else {\r\n            this._inkBar.hide();\r\n        }\r\n    }\r\n}\r\nMatTabNav.decorators = [\r\n    { type: Component, args: [{selector: '[mat-tab-nav-bar]',\r\n                exportAs: 'matTabNavBar, matTabNav',\r\n                inputs: ['color', 'disableRipple'],\r\n                template: \"<div class=\\\"mat-tab-links\\\" (cdkObserveContent)=\\\"_alignInkBar()\\\"><ng-content></ng-content><mat-ink-bar></mat-ink-bar></div>\",\r\n                styles: [\".mat-tab-nav-bar{overflow:hidden;position:relative;flex-shrink:0}.mat-tab-links{position:relative;display:flex}.mat-tab-link{height:48px;padding:0 24px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;vertical-align:top;text-decoration:none;position:relative;overflow:hidden;-webkit-tap-highlight-color:transparent}.mat-tab-link:focus{outline:0}.mat-tab-link:focus:not(.mat-tab-disabled){opacity:1}@media screen and (-ms-high-contrast:active){.mat-tab-link:focus{outline:dotted 2px}}.mat-tab-link.mat-tab-disabled{cursor:default}@media screen and (-ms-high-contrast:active){.mat-tab-link.mat-tab-disabled{opacity:.5}}.mat-tab-link .mat-tab-label-content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}@media screen and (-ms-high-contrast:active){.mat-tab-link{opacity:1}}[mat-stretch-tabs] .mat-tab-link{flex-basis:0;flex-grow:1}.mat-tab-link.mat-tab-disabled{pointer-events:none}@media (max-width:599px){.mat-tab-link{min-width:72px}}.mat-ink-bar{position:absolute;bottom:0;height:2px;transition:.5s cubic-bezier(.35,0,.25,1)}.mat-tab-group-inverted-header .mat-ink-bar{bottom:auto;top:0}@media screen and (-ms-high-contrast:active){.mat-ink-bar{outline:solid 2px;height:0}}\"],\r\n                host: { 'class': 'mat-tab-nav-bar' },\r\n                encapsulation: ViewEncapsulation.None,\r\n                changeDetection: ChangeDetectionStrategy.OnPush,\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nMatTabNav.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: Directionality, decorators: [{ type: Optional }] },\r\n    { type: NgZone },\r\n    { type: ChangeDetectorRef },\r\n    { type: ViewportRuler }\r\n];\r\nMatTabNav.propDecorators = {\r\n    _inkBar: [{ type: ViewChild, args: [MatInkBar,] }],\r\n    _tabLinks: [{ type: ContentChildren, args: [forwardRef(() => MatTabLink), { descendants: true },] }],\r\n    backgroundColor: [{ type: Input }]\r\n};\r\nclass MatTabLinkBase {\r\n}\r\n/** @type {?} */\r\nconst _MatTabLinkMixinBase = mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\r\n/**\r\n * Link inside of a `mat-tab-nav-bar`.\r\n */\r\nclass MatTabLink extends _MatTabLinkMixinBase {\r\n    /**\r\n     * @param {?} _tabNavBar\r\n     * @param {?} _elementRef\r\n     * @param {?} ngZone\r\n     * @param {?} platform\r\n     * @param {?} globalOptions\r\n     * @param {?} tabIndex\r\n     * @param {?=} _focusMonitor\r\n     */\r\n    constructor(_tabNavBar, _elementRef, ngZone, platform, globalOptions, tabIndex, _focusMonitor) {\r\n        super();\r\n        this._tabNavBar = _tabNavBar;\r\n        this._elementRef = _elementRef;\r\n        this._focusMonitor = _focusMonitor;\r\n        /**\r\n         * Whether the tab link is active or not.\r\n         */\r\n        this._isActive = false;\r\n        /**\r\n         * Whether the ripples are globally disabled through the RippleGlobalOptions\r\n         */\r\n        this._ripplesGloballyDisabled = false;\r\n        /**\r\n         * Ripple configuration for ripples that are launched on pointer down.\r\n         * \\@docs-private\r\n         */\r\n        this.rippleConfig = {};\r\n        this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\r\n        this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\r\n        this.tabIndex = parseInt(tabIndex) || 0;\r\n        if (globalOptions) {\r\n            // TODO(paul): Do not copy each option manually. Allow dynamic global option changes: #9729\r\n            this._ripplesGloballyDisabled = !!globalOptions.disabled;\r\n            this.rippleConfig = {\r\n                terminateOnPointerUp: globalOptions.terminateOnPointerUp,\r\n                animation: globalOptions.animation,\r\n            };\r\n        }\r\n        if (_focusMonitor) {\r\n            _focusMonitor.monitor(_elementRef);\r\n        }\r\n    }\r\n    /**\r\n     * Whether the link is active.\r\n     * @return {?}\r\n     */\r\n    get active() { return this._isActive; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set active(value) {\r\n        if (value !== this._isActive) {\r\n            this._isActive = value;\r\n            this._tabNavBar.updateActiveLink(this._elementRef);\r\n        }\r\n    }\r\n    /**\r\n     * Whether ripples are disabled on interaction\r\n     * \\@docs-private\r\n     * @return {?}\r\n     */\r\n    get rippleDisabled() {\r\n        return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\r\n            this._ripplesGloballyDisabled;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        this._tabLinkRipple._removeTriggerEvents();\r\n        if (this._focusMonitor) {\r\n            this._focusMonitor.stopMonitoring(this._elementRef);\r\n        }\r\n    }\r\n}\r\nMatTabLink.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: '[mat-tab-link], [matTabLink]',\r\n                exportAs: 'matTabLink',\r\n                inputs: ['disabled', 'disableRipple', 'tabIndex'],\r\n                host: {\r\n                    'class': 'mat-tab-link',\r\n                    '[attr.aria-current]': 'active',\r\n                    '[attr.aria-disabled]': 'disabled.toString()',\r\n                    '[attr.tabIndex]': 'tabIndex',\r\n                    '[class.mat-tab-disabled]': 'disabled',\r\n                    '[class.mat-tab-label-active]': 'active',\r\n                }\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nMatTabLink.ctorParameters = () => [\r\n    { type: MatTabNav },\r\n    { type: ElementRef },\r\n    { type: NgZone },\r\n    { type: Platform },\r\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS,] }] },\r\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\r\n    { type: FocusMonitor }\r\n];\r\nMatTabLink.propDecorators = {\r\n    active: [{ type: Input }]\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\r\n */\r\nclass MatTabsModule {\r\n}\r\nMatTabsModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                imports: [\r\n                    CommonModule,\r\n                    MatCommonModule,\r\n                    PortalModule,\r\n                    MatRippleModule,\r\n                    ObserversModule,\r\n                    A11yModule,\r\n                ],\r\n                // Don't export all components because some are only to be used internally.\r\n                exports: [\r\n                    MatCommonModule,\r\n                    MatTabGroup,\r\n                    MatTabLabel,\r\n                    MatTab,\r\n                    MatTabNav,\r\n                    MatTabLink,\r\n                    MatTabContent,\r\n                ],\r\n                declarations: [\r\n                    MatTabGroup,\r\n                    MatTabLabel,\r\n                    MatTab,\r\n                    MatInkBar,\r\n                    MatTabLabelWrapper,\r\n                    MatTabNav,\r\n                    MatTabLink,\r\n                    MatTabBody,\r\n                    MatTabBodyPortal,\r\n                    MatTabHeader,\r\n                    MatTabContent,\r\n                ],\r\n            },] },\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\r\n */\r\n\r\nexport { MatInkBar, _MAT_INK_BAR_POSITIONER, MatTabBody, MatTabBodyPortal, MatTabHeader, MatTabLabelWrapper, MatTab, MatTabLabel, MatTabNav, MatTabLink, MatTabContent, MatTabsModule, MatTabChangeEvent, MatTabGroupBase, _MatTabGroupMixinBase, MatTabGroup, matTabsAnimations, _MAT_INK_BAR_POSITIONER_FACTORY as ɵa24, MatTabBase as ɵf24, _MatTabMixinBase as ɵg24, MatTabHeaderBase as ɵb24, _MatTabHeaderMixinBase as ɵc24, MatTabLabelWrapperBase as ɵd24, _MatTabLabelWrapperMixinBase as ɵe24, MatTabLinkBase as ɵj24, MatTabNavBase as ɵh24, _MatTabLinkMixinBase as ɵk24, _MatTabNavMixinBase as ɵi24 };\r\n\r\n"]}