{"version":3,"sources":["C:/Users/VarshaRanga/angular/sample/demo/node_modules/@angular/material/esm2015/tree.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;;;;;;CAOC,0HAKC;;;;;;;;;;iFAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA2BD,2OAcC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBASA;;;;;;;;CAMD,wUASC;;;;;;;;;;;;;;;;;oBAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAiCD,iDAgBC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAWA;;;;;;;;;;;;;CAWD,+WAMC;;;;;;;;;;;;;;;;;;oBAIA;;;;;;;;;;;;;;;;;;;;;;CAaD,8QAcC;;;;;;;;;;;;;;;;;;;;;;oBAGA;;;;;;;;;;;;;;;;;;;;;CAiBD,0NASC;;;;;;;;;;;;;;;;;oBAGA;;;;;;;;;;;;;;;;;;;;;CAmBD;;;;;;;;;;;;;;;;;;;;;0BAOC","file":"tree.js","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { Directive, ViewContainerRef, Attribute, ContentChildren, ElementRef, Input, IterableDiffers, ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';\r\nimport { CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTreeModule } from '@angular/cdk/tree';\r\nimport { mixinDisabled, mixinTabIndex, MatCommonModule } from '@angular/material/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { DataSource } from '@angular/cdk/collections';\r\nimport { BehaviorSubject, merge } from 'rxjs';\r\nimport { map, take } from 'rxjs/operators';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\r\n * inside the outlet.\r\n */\r\nclass MatTreeNodeOutlet {\r\n    /**\r\n     * @param {?} viewContainer\r\n     */\r\n    constructor(viewContainer) {\r\n        this.viewContainer = viewContainer;\r\n    }\r\n}\r\nMatTreeNodeOutlet.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: '[matTreeNodeOutlet]'\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nMatTreeNodeOutlet.ctorParameters = () => [\r\n    { type: ViewContainerRef }\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nconst _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\r\n/** @type {?} */\r\nconst _MatNestedTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\r\n/**\r\n * Wrapper for the CdkTree node with Material design styles.\r\n * @template T\r\n */\r\nclass MatTreeNode extends _MatTreeNodeMixinBase {\r\n    /**\r\n     * @param {?} _elementRef\r\n     * @param {?} _tree\r\n     * @param {?} tabIndex\r\n     */\r\n    constructor(_elementRef, _tree, tabIndex) {\r\n        super(_elementRef, _tree);\r\n        this._elementRef = _elementRef;\r\n        this._tree = _tree;\r\n        this.role = 'treeitem';\r\n        this.tabIndex = Number(tabIndex) || 0;\r\n    }\r\n}\r\nMatTreeNode.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: 'mat-tree-node',\r\n                exportAs: 'matTreeNode',\r\n                inputs: ['disabled', 'tabIndex'],\r\n                host: {\r\n                    '[attr.aria-expanded]': 'isExpanded',\r\n                    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\r\n                    '[attr.role]': 'role',\r\n                    'class': 'mat-tree-node'\r\n                },\r\n                providers: [{ provide: CdkTreeNode, useExisting: MatTreeNode }]\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nMatTreeNode.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: CdkTree },\r\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\r\n];\r\nMatTreeNode.propDecorators = {\r\n    role: [{ type: Input }]\r\n};\r\n/**\r\n * Wrapper for the CdkTree node definition with Material design styles.\r\n * @template T\r\n */\r\nclass MatTreeNodeDef extends CdkTreeNodeDef {\r\n}\r\nMatTreeNodeDef.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: '[matTreeNodeDef]',\r\n                inputs: [\r\n                    'when: matTreeNodeDefWhen'\r\n                ],\r\n                providers: [{ provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef }]\r\n            },] },\r\n];\r\nMatTreeNodeDef.propDecorators = {\r\n    data: [{ type: Input, args: ['matTreeNode',] }]\r\n};\r\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\r\n(/** @type {?} */ (MatTreeNodeDef))['ctorParameters'] = () => (/** @type {?} */ (CdkTreeNodeDef))['ctorParameters'];\r\n/**\r\n * Wrapper for the CdkTree nested node with Material design styles.\r\n * @template T\r\n */\r\nclass MatNestedTreeNode extends _MatNestedTreeNodeMixinBase {\r\n    /**\r\n     * @param {?} _elementRef\r\n     * @param {?} _tree\r\n     * @param {?} _differs\r\n     * @param {?} tabIndex\r\n     */\r\n    constructor(_elementRef, _tree, _differs, tabIndex) {\r\n        super(_elementRef, _tree, _differs);\r\n        this._elementRef = _elementRef;\r\n        this._tree = _tree;\r\n        this._differs = _differs;\r\n        this.tabIndex = Number(tabIndex) || 0;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngAfterContentInit() {\r\n        super.ngAfterContentInit();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        super.ngOnDestroy();\r\n    }\r\n}\r\nMatNestedTreeNode.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: 'mat-nested-tree-node',\r\n                exportAs: 'matNestedTreeNode',\r\n                host: {\r\n                    '[attr.aria-expanded]': 'isExpanded',\r\n                    '[attr.role]': 'role',\r\n                    'class': 'mat-nested-tree-node',\r\n                },\r\n                inputs: ['disabled', 'tabIndex'],\r\n                providers: [\r\n                    { provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode },\r\n                    { provide: CdkTreeNode, useExisting: MatNestedTreeNode }\r\n                ]\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nMatNestedTreeNode.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: CdkTree },\r\n    { type: IterableDiffers },\r\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\r\n];\r\nMatNestedTreeNode.propDecorators = {\r\n    node: [{ type: Input, args: ['matNestedTreeNode',] }],\r\n    nodeOutlet: [{ type: ContentChildren, args: [MatTreeNodeOutlet,] }]\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Wrapper for the CdkTree padding with Material design styles.\r\n * @template T\r\n */\r\nclass MatTreeNodePadding extends CdkTreeNodePadding {\r\n}\r\nMatTreeNodePadding.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: '[matTreeNodePadding]',\r\n                providers: [{ provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding }]\r\n            },] },\r\n];\r\nMatTreeNodePadding.propDecorators = {\r\n    level: [{ type: Input, args: ['matTreeNodePadding',] }],\r\n    indent: [{ type: Input, args: ['matTreeNodePaddingIndent',] }]\r\n};\r\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\r\n(/** @type {?} */ (MatTreeNodePadding))['ctorParameters'] = () => (/** @type {?} */ (CdkTreeNodePadding))['ctorParameters'];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Wrapper for the CdkTable with Material design styles.\r\n * @template T\r\n */\r\nclass MatTree extends CdkTree {\r\n}\r\nMatTree.decorators = [\r\n    { type: Component, args: [{selector: 'mat-tree',\r\n                exportAs: 'matTree',\r\n                template: `<ng-container matTreeNodeOutlet></ng-container>`,\r\n                host: {\r\n                    'class': 'mat-tree',\r\n                    'role': 'tree',\r\n                },\r\n                styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;min-height:48px;flex:1;overflow:hidden;word-wrap:break-word}.mat-nested-tree-ndoe{border-bottom-width:0}\"],\r\n                encapsulation: ViewEncapsulation.None,\r\n                changeDetection: ChangeDetectionStrategy.OnPush,\r\n                providers: [{ provide: CdkTree, useExisting: MatTree }]\r\n            },] },\r\n];\r\nMatTree.propDecorators = {\r\n    _nodeOutlet: [{ type: ViewChild, args: [MatTreeNodeOutlet,] }]\r\n};\r\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\r\n(/** @type {?} */ (MatTree))['ctorParameters'] = () => (/** @type {?} */ (CdkTree))['ctorParameters'];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Wrapper for the CdkTree's toggle with Material design styles.\r\n * @template T\r\n */\r\nclass MatTreeNodeToggle extends CdkTreeNodeToggle {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.recursive = false;\r\n    }\r\n}\r\nMatTreeNodeToggle.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: '[matTreeNodeToggle]',\r\n                host: {\r\n                    '(click)': '_toggle($event)',\r\n                },\r\n                providers: [{ provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle }]\r\n            },] },\r\n];\r\nMatTreeNodeToggle.propDecorators = {\r\n    recursive: [{ type: Input, args: ['matTreeNodeToggleRecursive',] }]\r\n};\r\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\r\n(/** @type {?} */ (MatTreeNodeToggle))['ctorParameters'] = () => (/** @type {?} */ (CdkTreeNodeToggle))['ctorParameters'];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nconst MAT_TREE_DIRECTIVES = [\r\n    MatNestedTreeNode,\r\n    MatTreeNodeDef,\r\n    MatTreeNodePadding,\r\n    MatTreeNodeToggle,\r\n    MatTree,\r\n    MatTreeNode,\r\n    MatTreeNodeOutlet\r\n];\r\nclass MatTreeModule {\r\n}\r\nMatTreeModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                imports: [CdkTreeModule, CommonModule, MatCommonModule],\r\n                exports: MAT_TREE_DIRECTIVES,\r\n                declarations: MAT_TREE_DIRECTIVES,\r\n            },] },\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Tree flattener to convert a normal type of node to node with children & level information.\r\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\r\n *\r\n * For example, the input data of type `T` is nested, and contains its children data:\r\n *   SomeNode: {\r\n *     key: 'Fruits',\r\n *     children: [\r\n *       NodeOne: {\r\n *         key: 'Apple',\r\n *       },\r\n *       NodeTwo: {\r\n *        key: 'Pear',\r\n *      }\r\n *    ]\r\n *  }\r\n *  After flattener flatten the tree, the structure will become\r\n *  SomeNode: {\r\n *    key: 'Fruits',\r\n *    expandable: true,\r\n *    level: 1\r\n *  },\r\n *  NodeOne: {\r\n *    key: 'Apple',\r\n *    expandable: false,\r\n *    level: 2\r\n *  },\r\n *  NodeTwo: {\r\n *   key: 'Pear',\r\n *   expandable: false,\r\n *   level: 2\r\n * }\r\n * and the output flattened type is `F` with additional information.\r\n * @template T, F\r\n */\r\nclass MatTreeFlattener {\r\n    /**\r\n     * @param {?} transformFunction\r\n     * @param {?} getLevel\r\n     * @param {?} isExpandable\r\n     * @param {?} getChildren\r\n     */\r\n    constructor(transformFunction, getLevel, isExpandable, getChildren) {\r\n        this.transformFunction = transformFunction;\r\n        this.getLevel = getLevel;\r\n        this.isExpandable = isExpandable;\r\n        this.getChildren = getChildren;\r\n    }\r\n    /**\r\n     * @param {?} node\r\n     * @param {?} level\r\n     * @param {?} resultNodes\r\n     * @param {?} parentMap\r\n     * @return {?}\r\n     */\r\n    _flattenNode(node, level, resultNodes, parentMap) {\r\n        /** @type {?} */\r\n        const flatNode = this.transformFunction(node, level);\r\n        resultNodes.push(flatNode);\r\n        if (this.isExpandable(flatNode)) {\r\n            /** @type {?} */\r\n            const childrenNodes = this.getChildren(node);\r\n            if (Array.isArray(childrenNodes)) {\r\n                this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\r\n            }\r\n            else {\r\n                childrenNodes.pipe(take(1)).subscribe(children => {\r\n                    this._flattenChildren(children, level, resultNodes, parentMap);\r\n                });\r\n            }\r\n        }\r\n        return resultNodes;\r\n    }\r\n    /**\r\n     * @param {?} children\r\n     * @param {?} level\r\n     * @param {?} resultNodes\r\n     * @param {?} parentMap\r\n     * @return {?}\r\n     */\r\n    _flattenChildren(children, level, resultNodes, parentMap) {\r\n        children.forEach((child, index) => {\r\n            /** @type {?} */\r\n            let childParentMap = parentMap.slice();\r\n            childParentMap.push(index != children.length - 1);\r\n            this._flattenNode(child, level + 1, resultNodes, childParentMap);\r\n        });\r\n    }\r\n    /**\r\n     * Flatten a list of node type T to flattened version of node F.\r\n     * Please note that type T may be nested, and the length of `structuredData` may be different\r\n     * from that of returned list `F[]`.\r\n     * @param {?} structuredData\r\n     * @return {?}\r\n     */\r\n    flattenNodes(structuredData) {\r\n        /** @type {?} */\r\n        let resultNodes = [];\r\n        structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\r\n        return resultNodes;\r\n    }\r\n    /**\r\n     * Expand flattened node with current expansion status.\r\n     * The returned list may have different length.\r\n     * @param {?} nodes\r\n     * @param {?} treeControl\r\n     * @return {?}\r\n     */\r\n    expandFlattenedNodes(nodes, treeControl) {\r\n        /** @type {?} */\r\n        let results = [];\r\n        /** @type {?} */\r\n        let currentExpand = [];\r\n        currentExpand[0] = true;\r\n        nodes.forEach(node => {\r\n            /** @type {?} */\r\n            let expand = true;\r\n            for (let i = 0; i <= this.getLevel(node); i++) {\r\n                expand = expand && currentExpand[i];\r\n            }\r\n            if (expand) {\r\n                results.push(node);\r\n            }\r\n            if (this.isExpandable(node)) {\r\n                currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\r\n            }\r\n        });\r\n        return results;\r\n    }\r\n}\r\n/**\r\n * Data source for flat tree.\r\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\r\n * to `MatTree`.\r\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\r\n * to type `F` for `MatTree` to consume.\r\n * @template T, F\r\n */\r\nclass MatTreeFlatDataSource extends DataSource {\r\n    /**\r\n     * @param {?} treeControl\r\n     * @param {?} treeFlattener\r\n     * @param {?=} initialData\r\n     */\r\n    constructor(treeControl, treeFlattener, initialData = []) {\r\n        super();\r\n        this.treeControl = treeControl;\r\n        this.treeFlattener = treeFlattener;\r\n        this._flattenedData = new BehaviorSubject([]);\r\n        this._expandedData = new BehaviorSubject([]);\r\n        this._data = new BehaviorSubject(initialData);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get data() { return this._data.value; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set data(value) {\r\n        this._data.next(value);\r\n        this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\r\n        this.treeControl.dataNodes = this._flattenedData.value;\r\n    }\r\n    /**\r\n     * @param {?} collectionViewer\r\n     * @return {?}\r\n     */\r\n    connect(collectionViewer) {\r\n        /** @type {?} */\r\n        const changes = [\r\n            collectionViewer.viewChange,\r\n            this.treeControl.expansionModel.onChange,\r\n            this._flattenedData\r\n        ];\r\n        return merge(...changes).pipe(map(() => {\r\n            this._expandedData.next(this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\r\n            return this._expandedData.value;\r\n        }));\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    disconnect() {\r\n        // no op\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Data source for nested tree.\r\n *\r\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\r\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\r\n * @template T\r\n */\r\nclass MatTreeNestedDataSource extends DataSource {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._data = new BehaviorSubject([]);\r\n    }\r\n    /**\r\n     * Data for the nested tree\r\n     * @return {?}\r\n     */\r\n    get data() { return this._data.value; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set data(value) { this._data.next(value); }\r\n    /**\r\n     * @param {?} collectionViewer\r\n     * @return {?}\r\n     */\r\n    connect(collectionViewer) {\r\n        return merge(...[collectionViewer.viewChange, this._data])\r\n            .pipe(map(() => {\r\n            return this.data;\r\n        }));\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    disconnect() {\r\n        // no op\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\r\n */\r\n\r\nexport { _MatTreeNodeMixinBase, _MatNestedTreeNodeMixinBase, MatTreeNode, MatTreeNodeDef, MatNestedTreeNode, MatTreeNodePadding, MatTree, MatTreeModule, MatTreeNodeToggle, MatTreeNodeOutlet, MatTreeFlattener, MatTreeFlatDataSource, MatTreeNestedDataSource };\r\n\r\n"]}